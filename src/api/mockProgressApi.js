// mockProgressApi.js - –ü–æ–ª–Ω–æ–µ Mock API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ü—É—Ç—å: src/api/mockProgressApi.js

// ‚úÖ –°–ò–°–¢–ï–ú–ê –ó–ù–ê–ß–ö–û–í –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô
const badgeSystem = {
  // –ó–Ω–∞—á–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
  first_module: {
    id: 'first_module',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –æ–±—É—á–µ–Ω–∏—è',
    icon: 'üéØ',
    rarity: 'common',
    category: 'progress'
  },
  
  speed_demon: {
    id: 'speed_demon',
    name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω –º–æ–¥—É–ª—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç',
    icon: '‚ö°',
    rarity: 'uncommon',
    category: 'performance'
  },
  
  perfectionist: {
    id: 'perfectionist',
    name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
    description: '–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç 100% –≤ –∫–≤–∏–∑–µ',
    icon: 'üíé',
    rarity: 'rare',
    category: 'excellence'
  },
  
  expert: {
    id: 'expert',
    name: '–≠–∫—Å–ø–µ—Ä—Ç',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ 3 –º–æ–¥—É–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—à–µ 85%',
    icon: '‚≠ê',
    rarity: 'epic',
    category: 'expertise'
  },
  
  leader: {
    id: 'leader',
    name: '–õ–∏–¥–µ—Ä',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω –º–æ–¥—É–ª—å –ø–æ –ª–∏–¥–µ—Ä—Å—Ç–≤—É',
    icon: 'üëë',
    rarity: 'rare',
    category: 'leadership'
  },
  
  night_owl: {
    id: 'night_owl',
    name: '–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω –º–æ–¥—É–ª—å –≤ –ø–µ—Ä–∏–æ–¥ —Å 23:00 –¥–æ 06:00',
    icon: 'ü¶â',
    rarity: 'uncommon',
    category: 'timing'
  },
  
  early_bird: {
    id: 'early_bird',
    name: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω –º–æ–¥—É–ª—å –≤ –ø–µ—Ä–∏–æ–¥ —Å 06:00 –¥–æ 09:00',
    icon: 'üê¶',
    rarity: 'uncommon',
    category: 'timing'
  },
  
  marathon_runner: {
    id: 'marathon_runner',
    name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ 5 –º–æ–¥—É–ª–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
    icon: 'üèÉ',
    rarity: 'epic',
    category: 'endurance'
  },
  
  comeback_king: {
    id: 'comeback_king',
    name: '–ö–æ—Ä–æ–ª—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è',
    description: '–£–ª—É—á—à–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏',
    icon: 'üîÑ',
    rarity: 'rare',
    category: 'improvement'
  },
  
  legendary_master: {
    id: 'legendary_master',
    name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—à–µ 90%',
    icon: 'üèÜ',
    rarity: 'legendary',
    category: 'mastery'
  }
}

// ‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –ü–†–û–ì–†–ï–°–°–ê
const mockProgressData = {
  'user_1': {
    userId: 'user_1',
    totalScore: 2450,
    level: 3,
    completedModules: [1, 2, 21],
    moduleProgress: {
      1: {
        moduleId: 1,
        completed: true,
        score: 850,
        percentage: 85,
        correctAnswers: 4,
        totalQuestions: 5,
        timeSpent: 1230, // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        completedAt: '2025-01-15T10:30:00Z',
        attempts: 1,
        sectionsCompleted: [0, 1, 2, 3, 4],
        currentSection: 5,
        bestScore: 850,
        earnedBadges: ['first_module', 'expert']
      },
      2: {
        moduleId: 2,
        completed: true,
        score: 720,
        percentage: 72,
        correctAnswers: 4,
        totalQuestions: 6,
        timeSpent: 890,
        completedAt: '2025-01-16T14:20:00Z',
        attempts: 2,
        sectionsCompleted: [0, 1, 2, 3, 4, 5],
        currentSection: 6,
        bestScore: 720,
        earnedBadges: []
      },
      21: {
        moduleId: 21,
        completed: true,
        score: 880,
        percentage: 88,
        correctAnswers: 5,
        totalQuestions: 6,
        timeSpent: 1450,
        completedAt: '2025-01-17T16:45:00Z',
        attempts: 1,
        sectionsCompleted: [0, 1, 2, 3, 4, 5],
        currentSection: 6,
        bestScore: 880,
        earnedBadges: ['leader', 'expert']
      },
      3: {
        moduleId: 3,
        completed: false,
        score: 0,
        percentage: 0,
        currentSection: 1,
        timeSpent: 320,
        lastAccessedAt: '2025-01-17T09:15:00Z',
        attempts: 0,
        sectionsCompleted: [0],
        earnedBadges: []
      }
    },
    badges: [
      { 
        ...badgeSystem.first_module, 
        earnedAt: '2025-01-15T10:30:00Z',
        moduleId: 1
      },
      { 
        ...badgeSystem.expert, 
        earnedAt: '2025-01-16T14:20:00Z',
        moduleId: 2
      },
      { 
        ...badgeSystem.leader, 
        earnedAt: '2025-01-17T16:45:00Z',
        moduleId: 21
      }
    ],
    achievements: {
      totalQuizzesPassed: 3,
      totalCorrectAnswers: 13,
      totalQuestions: 17,
      averageScore: 816,
      bestStreak: 3,
      totalTimeSpent: 3570,
      averageTimePerModule: 1190,
      fastestCompletion: 890,
      perfectScores: 0,
      improvementCount: 1
    },
    statistics: {
      studyDays: 3,
      averageSessionTime: 1190,
      preferredStudyTime: 'afternoon', // morning, afternoon, evening, night
      weeklyGoal: 5,
      weeklyCompleted: 3,
      streakDays: 3,
      longestStreak: 3
    },
    lastActiveAt: '2025-01-17T16:45:00Z',
    createdAt: '2025-01-15T08:00:00Z'
  },

  'user_2': {
    userId: 'user_2', 
    totalScore: 450,
    level: 1,
    completedModules: [],
    moduleProgress: {
      1: {
        moduleId: 1,
        completed: false,
        score: 0,
        percentage: 0,
        currentSection: 0,
        timeSpent: 150,
        lastAccessedAt: '2025-01-17T11:00:00Z',
        attempts: 0,
        sectionsCompleted: [],
        earnedBadges: []
      }
    },
    badges: [],
    achievements: {
      totalQuizzesPassed: 0,
      totalCorrectAnswers: 0,
      totalQuestions: 0,
      averageScore: 0,
      bestStreak: 0,
      totalTimeSpent: 150,
      averageTimePerModule: 0,
      fastestCompletion: 0,
      perfectScores: 0,
      improvementCount: 0
    },
    statistics: {
      studyDays: 1,
      averageSessionTime: 150,
      preferredStudyTime: 'morning',
      weeklyGoal: 3,
      weeklyCompleted: 0,
      streakDays: 0,
      longestStreak: 0
    },
    lastActiveAt: '2025-01-17T11:00:00Z',
    createdAt: '2025-01-17T10:45:00Z'
  },

  // –î–æ–±–∞–≤–∏–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  'superuser_s': {
    userId: 'superuser_s',
    totalScore: 8750,
    level: 8,
    completedModules: [1, 2, 3, 4, 14, 15, 20, 21],
    moduleProgress: {
      1: { moduleId: 1, completed: true, score: 950, percentage: 95, attempts: 1, earnedBadges: ['first_module', 'perfectionist'] },
      2: { moduleId: 2, completed: true, score: 900, percentage: 90, attempts: 1, earnedBadges: ['speed_demon'] },
      3: { moduleId: 3, completed: true, score: 1000, percentage: 100, attempts: 1, earnedBadges: ['perfectionist'] },
      4: { moduleId: 4, completed: true, score: 920, percentage: 92, attempts: 2, earnedBadges: ['comeback_king'] },
      14: { moduleId: 14, completed: true, score: 950, percentage: 95, attempts: 1, earnedBadges: [] },
      15: { moduleId: 15, completed: true, score: 880, percentage: 88, attempts: 1, earnedBadges: [] },
      20: { moduleId: 20, completed: true, score: 1000, percentage: 100, attempts: 1, earnedBadges: ['perfectionist'] },
      21: { moduleId: 21, completed: true, score: 1150, percentage: 96, attempts: 1, earnedBadges: ['leader', 'marathon_runner'] }
    },
    badges: [
      { ...badgeSystem.first_module, earnedAt: '2025-01-10T10:30:00Z' },
      { ...badgeSystem.perfectionist, earnedAt: '2025-01-10T10:30:00Z' },
      { ...badgeSystem.speed_demon, earnedAt: '2025-01-11T09:15:00Z' },
      { ...badgeSystem.expert, earnedAt: '2025-01-12T15:20:00Z' },
      { ...badgeSystem.leader, earnedAt: '2025-01-15T14:30:00Z' },
      { ...badgeSystem.comeback_king, earnedAt: '2025-01-13T11:45:00Z' },
      { ...badgeSystem.marathon_runner, earnedAt: '2025-01-14T18:20:00Z' },
      { ...badgeSystem.legendary_master, earnedAt: '2025-01-15T16:00:00Z' }
    ],
    achievements: {
      totalQuizzesPassed: 8,
      totalCorrectAnswers: 45,
      totalQuestions: 48,
      averageScore: 968,
      bestStreak: 8,
      totalTimeSpent: 7200,
      averageTimePerModule: 900,
      fastestCompletion: 420,
      perfectScores: 3,
      improvementCount: 2
    },
    statistics: {
      studyDays: 8,
      averageSessionTime: 900,
      preferredStudyTime: 'evening',
      weeklyGoal: 10,
      weeklyCompleted: 8,
      streakDays: 8,
      longestStreak: 8
    },
    lastActiveAt: '2025-01-15T16:00:00Z',
    createdAt: '2025-01-10T08:00:00Z'
  }
}

// ‚úÖ –§–£–ù–ö–¶–ò–ò –í–´–ß–ò–°–õ–ï–ù–ò–Ø –ó–ù–ê–ß–ö–û–í
const badgeCalculator = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
  calculateEarnedBadges: (quizResult, userProgress, moduleId) => {
    const earnedBadges = []
    const { score, percentage, timeSpent, correctAnswers, totalQuestions } = quizResult
    const currentTime = new Date()
    const hour = currentTime.getHours()

    // –ü–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å
    if (!userProgress.completedModules || userProgress.completedModules.length === 0) {
      earnedBadges.push(badgeSystem.first_module)
    }

    // –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç (100%)
    if (percentage === 100) {
      earnedBadges.push(badgeSystem.perfectionist)
    }

    // –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω (–º–æ–¥—É–ª—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç)
    if (timeSpent < 1800) {
      earnedBadges.push(badgeSystem.speed_demon)
    }

    // –ü–æ–ª—É–Ω–æ—á–Ω–∏–∫ (23:00 - 06:00)
    if (hour >= 23 || hour < 6) {
      earnedBadges.push(badgeSystem.night_owl)
    }

    // –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (06:00 - 09:00)
    if (hour >= 6 && hour < 9) {
      earnedBadges.push(badgeSystem.early_bird)
    }

    // –õ–∏–¥–µ—Ä (–º–æ–¥—É–ª—å 21)
    if (moduleId === 21 && percentage >= 75) {
      earnedBadges.push(badgeSystem.leader)
    }

    // –≠–∫—Å–ø–µ—Ä—Ç (3 –º–æ–¥—É–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—à–µ 85%)
    const highScoreModules = Object.values(userProgress.moduleProgress || {})
      .filter(m => m.completed && m.percentage >= 85)
    if (highScoreModules.length >= 2 && percentage >= 85) { // +1 —Ç–µ–∫—É—â–∏–π
      earnedBadges.push(badgeSystem.expert)
    }

    // –ö–æ—Ä–æ–ª—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (—É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    const previousResult = userProgress.moduleProgress?.[moduleId]
    if (previousResult && previousResult.bestScore < score) {
      earnedBadges.push(badgeSystem.comeback_king)
    }

    return earnedBadges
  }
}

// ‚úÖ API –ü–†–û–ì–†–ï–°–°–ê
const progressApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  fetchUserProgress: async (userId = 'user_1') => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
          const localData = localStorage.getItem('gkbr_user_progress')
          if (localData) {
            const parsed = JSON.parse(localData)
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage –¥–ª—è:', userId)
            resolve(parsed)
            return
          }

          // –ï—Å–ª–∏ –Ω–µ—Ç –≤ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          const userProgress = mockProgressData[userId]
          if (userProgress) {
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userProgress.totalScore, '–æ—á–∫–æ–≤')
            resolve(userProgress)
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = {
              userId,
              totalScore: 0,
              level: 1,
              completedModules: [],
              moduleProgress: {},
              badges: [],
              achievements: {
                totalQuizzesPassed: 0,
                totalCorrectAnswers: 0,
                totalQuestions: 0,
                averageScore: 0,
                bestStreak: 0,
                totalTimeSpent: 0,
                averageTimePerModule: 0,
                fastestCompletion: 0,
                perfectScores: 0,
                improvementCount: 0
              },
              statistics: {
                studyDays: 0,
                averageSessionTime: 0,
                preferredStudyTime: 'afternoon',
                weeklyGoal: 5,
                weeklyCompleted: 0,
                streakDays: 0,
                longestStreak: 0
              },
              lastActiveAt: new Date().toISOString(),
              createdAt: new Date().toISOString()
            }
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`)
            resolve(newUser)
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error)
          reject(error)
        }
      }, 300)
    })
  },

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞
  saveQuizResult: async (userId, quizData) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
          let userProgress = mockProgressData[userId]
          if (!userProgress) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            userProgress = {
              userId,
              totalScore: 0,
              level: 1,
              completedModules: [],
              moduleProgress: {},
              badges: [],
              achievements: {
                totalQuizzesPassed: 0,
                totalCorrectAnswers: 0,
                totalQuestions: 0,
                averageScore: 0,
                bestStreak: 0,
                totalTimeSpent: 0,
                averageTimePerModule: 0,
                fastestCompletion: 0,
                perfectScores: 0,
                improvementCount: 0
              },
              statistics: {
                studyDays: 0,
                averageSessionTime: 0,
                preferredStudyTime: 'afternoon',
                weeklyGoal: 5,
                weeklyCompleted: 0,
                streakDays: 0,
                longestStreak: 0
              },
              lastActiveAt: new Date().toISOString(),
              createdAt: new Date().toISOString()
            }
            mockProgressData[userId] = userProgress
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏
          const earnedBadges = badgeCalculator.calculateEarnedBadges(
            quizData, 
            userProgress, 
            quizData.moduleId
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è
          const oldModuleProgress = userProgress.moduleProgress[quizData.moduleId] || {}
          userProgress.moduleProgress[quizData.moduleId] = {
            ...oldModuleProgress,
            ...quizData,
            earnedBadges: earnedBadges.map(b => b.id),
            bestScore: Math.max(oldModuleProgress.bestScore || 0, quizData.score),
            completedAt: new Date().toISOString()
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
          const oldModuleScore = oldModuleProgress.score || 0
          userProgress.totalScore = userProgress.totalScore - oldModuleScore + quizData.score

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
          if (quizData.completed && !userProgress.completedModules.includes(quizData.moduleId)) {
            userProgress.completedModules.push(quizData.moduleId)
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–∫–∏
          earnedBadges.forEach(badge => {
            if (!userProgress.badges.find(b => b.id === badge.id)) {
              userProgress.badges.push({
                ...badge,
                earnedAt: new Date().toISOString(),
                moduleId: quizData.moduleId
              })
            }
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          userProgress.achievements.totalQuizzesPassed++
          userProgress.achievements.totalCorrectAnswers += quizData.correctAnswers
          userProgress.achievements.totalQuestions += quizData.totalQuestions
          userProgress.achievements.totalTimeSpent += quizData.timeSpent
          userProgress.achievements.averageScore = Math.round(
            userProgress.totalScore / userProgress.achievements.totalQuizzesPassed
          )
          
          if (quizData.percentage === 100) {
            userProgress.achievements.perfectScores++
          }

          if (oldModuleProgress.score && quizData.score > oldModuleProgress.score) {
            userProgress.achievements.improvementCount++
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å (–∫–∞–∂–¥—ã–µ 1000 –æ—á–∫–æ–≤ = –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
          userProgress.level = Math.floor(userProgress.totalScore / 1000) + 1

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          userProgress.statistics.averageSessionTime = Math.round(
            userProgress.achievements.totalTimeSpent / userProgress.achievements.totalQuizzesPassed
          )

          userProgress.lastActiveAt = new Date().toISOString()

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
          localStorage.setItem('gkbr_user_progress', JSON.stringify(userProgress))

          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –º–æ–¥—É–ª—å ${quizData.moduleId}`)
          console.log(`üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–Ω–∞—á–∫–æ–≤: ${earnedBadges.length}`)
          
          resolve({
            userProgress,
            earnedBadges
          })
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error)
          reject(error)
        }
      }, 500)
    })
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è (—á—Ç–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π)
  updateModuleProgress: async (userId, moduleId, progressData) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          let userProgress = mockProgressData[userId]
          if (!userProgress) {
            reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'))
            return
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è
          if (!userProgress.moduleProgress[moduleId]) {
            userProgress.moduleProgress[moduleId] = {
              moduleId,
              completed: false,
              score: 0,
              percentage: 0,
              currentSection: 0,
              timeSpent: 0,
              attempts: 0,
              sectionsCompleted: [],
              earnedBadges: []
            }
          }

          userProgress.moduleProgress[moduleId] = {
            ...userProgress.moduleProgress[moduleId],
            ...progressData,
            lastAccessedAt: new Date().toISOString()
          }

          userProgress.lastActiveAt = new Date().toISOString()

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          localStorage.setItem('gkbr_user_progress', JSON.stringify(userProgress))

          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è ${moduleId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
          resolve(userProgress)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–æ–¥—É–ª—è:', error)
          reject(error)
        }
      }, 200)
    })
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  fetchGlobalStatistics: async () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        const allUsers = Object.values(mockProgressData)
        const stats = {
          totalUsers: allUsers.length,
          totalCompletedModules: allUsers.reduce((sum, user) => sum + user.completedModules.length, 0),
          averageScore: Math.round(
            allUsers.reduce((sum, user) => sum + user.totalScore, 0) / allUsers.length
          ),
          totalBadges: allUsers.reduce((sum, user) => sum + user.badges.length, 0),
          mostPopularModule: 1, // –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
          averageCompletionTime: Math.round(
            allUsers.reduce((sum, user) => sum + user.achievements.averageTimePerModule, 0) / allUsers.length
          )
        }
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        resolve(stats)
      }, 400)
    })
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  fetchLeaderboard: async (limit = 10) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        const leaderboard = Object.values(mockProgressData)
          .sort((a, b) => b.totalScore - a.totalScore)
          .slice(0, limit)
          .map((user, index) => ({
            rank: index + 1,
            userId: user.userId,
            totalScore: user.totalScore,
            level: user.level,
            completedModules: user.completedModules.length,
            badges: user.badges.length
          }))
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–ø ${limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
        resolve(leaderboard)
      }, 300)
    })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–∫–∏
  fetchAvailableBadges: async () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        const badges = Object.values(badgeSystem)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–∫–∏:', badges.length)
        resolve(badges)
      }, 200)
    })
  },

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  resetUserProgress: async (userId) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        delete mockProgressData[userId]
        localStorage.removeItem('gkbr_user_progress')
        console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
        resolve(true)
      }, 100)
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export { mockProgressData, badgeSystem, badgeCalculator }
export default progressApi