import React, { useState, useEffect, useCallback } from 'react'
import { useNavigate, useParams } from 'react-router-dom'

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { PremiumPage, PremiumCard, RippleButton, AnimatedProgress } from '../../components/premium/PremiumUI.jsx'
import { useSounds } from '../../components/premium/SoundSystem.jsx'

// ‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import ProgressBar from '../../components/ProgressBar.jsx'
import BadgeMeter from '../../components/BadgeMeter.jsx'
import { notify } from '../../components/NotificationPanel.jsx'

// ‚úÖ API
import { contentApi } from '../../api/mockContentApi.js'
import { progressApi } from '../../api/mockProgressApi.js'

const Module5OT = () => { // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è OT (–û—Ö—Ä–∞–Ω–∞ –¢—Ä—É–¥–∞)
  const navigate = useNavigate()
  const { moduleId } = useParams()
  const { sounds } = useSounds() // ‚úÖ –ó–≤—É–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
  
  const [currentSection, setCurrentSection] = useState(0)
  const [completedSections, setCompletedSections] = useState([])
  const [readingTime, setReadingTime] = useState(0)
  const [isReading, setIsReading] = useState(false)
  const [moduleData, setModuleData] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è –∏–∑ API
  useEffect(() => {
    const fetchModuleContent = async () => {
      setIsLoading(true)
      try {
        const parsedModuleId = parseInt(moduleId) || 5
        if (isNaN(parsedModuleId)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–æ–¥—É–ª—è.')
        }
        const data = await contentApi.fetchModuleContent(parsedModuleId)
        setModuleData(data)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProgress = await progressApi.fetchUserProgress()
        if (userProgress.completedModules) {
          const moduleProgress = userProgress.moduleProgress?.[parsedModuleId] || {}
          setCompletedSections(moduleProgress.completedSections || [])
        }
        
        sounds.success()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è:', error)
        notify.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è.')
        sounds.error()
        navigate('/dashboard')
      } finally {
        setIsLoading(false)
      }
    }

    fetchModuleContent()
  }, [moduleId, navigate, sounds])

  // –¢–∞–π–º–µ—Ä —á—Ç–µ–Ω–∏—è
  useEffect(() => {
    if (isReading) {
      const timer = setInterval(() => {
        setReadingTime(prev => prev + 1)
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [isReading])

  useEffect(() => {
    setIsReading(true)
    setReadingTime(0)
    return () => setIsReading(false)
  }, [currentSection])

  const nextSection = useCallback(() => {
    if (!moduleData) return
    if (currentSection < moduleData.sections.length - 1) {
      setCurrentSection(currentSection + 1)
      sounds.success()
    } else {
      completeModule()
    }
  }, [currentSection, moduleData, sounds])

  const prevSection = useCallback(() => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1)
      sounds.click()
    }
  }, [currentSection, sounds])

  const completeModule = async () => {
    try {
      await progressApi.updateModuleProgress({
        moduleId: parseInt(moduleId) || 5,
        completedSections: completedSections
      })
      notify.success('–ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω', '–û–¢ - –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞ –∏–∑—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      sounds.achievement()
      navigate(`/module/${moduleId}/quiz`)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–¥—É–ª—è:', error)
      notify.error('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å.')
      sounds.error()
    }
  }

  const backToDashboard = () => {
    sounds.click()
    navigate('/dashboard')
  }

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (isLoading || !moduleData) {
    return (
      <PremiumPage background="matrix" className="min-h-screen flex items-center justify-center">
        <PremiumCard variant="glow" className="text-center">
          <div className="w-20 h-20 border-4 border-red-400 border-t-transparent rounded-full animate-spin mx-auto mb-6"></div>
          <h2 className="text-2xl font-bold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...</h2>
          <p className="text-red-200">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞</p>
        </PremiumCard>
      </PremiumPage>
    )
  }

  const currentSectionData = moduleData.sections[currentSection]
  const progress = Math.round(((currentSection + 1) / moduleData.sections.length) * 100)

  return (
    <PremiumPage background="particles" className="min-h-screen">
      <div className="max-w-4xl mx-auto px-6 py-12">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è */}
        <PremiumCard variant="glow" className="mb-8 text-center">
          <div className="mb-6">
            <h1 className="text-4xl font-bold text-white mb-4">
              ü¶∫ –ú–æ–¥—É–ª—å 5: –û–¢
            </h1>
            <p className="text-red-200 text-lg mb-4">
              –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞ - –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            </p>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
            <div className="flex items-center justify-center space-x-4 mb-4">
              <span className="text-sm text-red-300">
                –†–∞–∑–¥–µ–ª {currentSection + 1} –∏–∑ {moduleData.sections?.length || 1}
              </span>
              <div className="flex-1 max-w-xs">
                <AnimatedProgress value={progress} />
              </div>
              <span className="text-sm text-red-300">
                {Math.round(progress)}%
              </span>
            </div>

            <div className="text-right text-white">
              <div className="text-sm text-red-200">–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è:</div>
              <div className="font-semibold">{formatTime(readingTime)}</div>
            </div>
          </div>
        </PremiumCard>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è */}
        <PremiumCard variant="default" className="mb-8">
          <div className="text-white">
            <h2 className="text-2xl font-bold text-red-300 mb-6">
              {currentSectionData.title || '–û—Å–Ω–æ–≤—ã –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞'}
            </h2>
            
            <div className="prose prose-invert max-w-none text-white">
              <h3>üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ –æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞?</h3>
              <p>
                –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞ ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ 
                –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∞—è –ø—Ä–∞–≤–æ–≤—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, 
                –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ-–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ, –ª–µ—á–µ–±–Ω–æ-–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ, 
                —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∏–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
              </p>
              
              <h4>üìã –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è (—Å 2022 –≥–æ–¥–∞):</h4>
              <ul>
                <li><strong>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ê:</strong> –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞ (–¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)</li>
                <li><strong>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ë:</strong> –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–¥–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏</li>
                <li><strong>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –í:</strong> –†–∞–±–æ—Ç—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                <li><strong>–û–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –°–ò–ó:</strong> –ö–∞–∂–¥—ã–µ 3 –≥–æ–¥–∞</li>
                <li><strong>–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏:</strong> –ö–∞–∂–¥—ã–µ 3 –≥–æ–¥–∞</li>
              </ul>

              <h4>‚ö†Ô∏è –ö—Ç–æ –æ–±—è–∑–∞–Ω –æ–±—É—á–∞—Ç—å—Å—è –≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö:</h4>
              <ul>
                <li>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π</li>
                <li>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞</li>
                <li>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤</li>
                <li>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞</li>
                <li>–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π</li>
              </ul>

              <h4>üí∞ –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:</h4>
              <ul>
                <li>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—É—á–µ–Ω–∏—è: –¥–æ 130 000 —Ä—É–±–ª–µ–π</li>
                <li>–î–æ–ø—É—Å–∫ –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: –¥–æ 130 000 —Ä—É–±–ª–µ–π</li>
                <li>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è: –¥–æ 80 000 —Ä—É–±–ª–µ–π</li>
                <li>–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
              </ul>
            </div>
          </div>
        </PremiumCard>

        {/* –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <PremiumCard variant="default" className="mb-8 bg-yellow-500/10 border border-yellow-400/30">
          <div className="text-white">
            <h3 className="text-xl font-bold text-yellow-300 mb-3 flex items-center">
              <span className="mr-2 text-2xl">‚ö°</span> –ò–∑–º–µ–Ω–µ–Ω–∏—è 2022-2025:
            </h3>
            <p className="text-white leading-relaxed">
              –° 2022 –≥–æ–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. 
              –í—Å–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –û–ë–Ø–ó–ê–ù–´ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö. 
              –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è!
            </p>
          </div>
        </PremiumCard>

        {/* –ü—Ä–æ–¥–∞–∂–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç */}
        <PremiumCard variant="default" className="mb-8 bg-emerald-500/10 border border-emerald-400/30">
          <div className="text-white">
            <h3 className="text-xl font-bold text-emerald-300 mb-3 flex items-center">
              <span className="mr-2 text-2xl">üí∞</span> –ü—Ä–æ–¥–∞–∂–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç:
            </h3>
            <p className="text-white leading-relaxed italic">
              –û–±—É—á–µ–Ω–∏–µ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ —Å—Ç–æ–∏—Ç 5-15 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ 3 –≥–æ–¥–∞. 
              –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—É—á–µ–Ω–∏—è ‚Äî 130 000 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞. 
              –ü—Ä–∏ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —É–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. 
              –≠—Ç–æ –Ω–µ —Ä–∞—Å—Ö–æ–¥—ã, –∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –º–∏–ª–ª–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å.
            </p>
          </div>
        </PremiumCard>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex items-center justify-between">
          <RippleButton
            variant="outline"
            onClick={backToDashboard}
            className="text-red-300 border-red-300 hover:bg-red-500/20"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º
          </RippleButton>

          <div className="flex space-x-4">
            <RippleButton
              variant="outline"
              onClick={prevSection}
              disabled={currentSection === 0}
              className="text-red-300 border-red-300 hover:bg-red-500/20 disabled:opacity-50"
            >
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
            </RippleButton>

            <RippleButton
              variant="glow"
              onClick={nextSection}
              className="bg-red-600 hover:bg-red-500 text-white"
            >
              {currentSection === (moduleData.sections?.length - 1) ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å' : '–°–ª–µ–¥—É—é—â–∏–π ‚Üí'}
            </RippleButton>
          </div>
        </div>
      </div>
    </PremiumPage>
  )
}

export default Module5OT // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è OT