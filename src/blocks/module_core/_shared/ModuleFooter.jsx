// ModuleFooter.jsx - –ï–¥–∏–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
// –ü—É—Ç—å: src/blocks/module_core/_shared/ModuleFooter.jsx

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'

// ‚úÖ –ü–†–ï–ú–ò–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ê–ó–´ 2
import { 
  InteractiveCard, 
  RippleButton, 
  AnimatedModal,
  FloatingActionButton
} from '../../../components/premium/InteractiveElements.jsx'

import { GlowEffect, GlassEffect } from '../../../components/premium/VisualEffects.jsx'
import { AnimatedCounter, PulseElement } from '../../../components/premium/AnimatedComponents.jsx'
import { useSounds } from '../../../components/premium/SoundSystem.jsx'
import { useDesignSystem } from '../../../components/premium/DesignSystem.jsx'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { notify } from '../../../components/NotificationPanel.jsx'

const ModuleFooter = ({
  moduleId,
  currentSection = 0,
  totalSections = 1,
  completedSections = [],
  sectionTitles = [],
  readingTime = 0,
  estimatedTime = '45 –º–∏–Ω',
  onPrevSection,
  onNextSection,
  onSectionComplete,
  onModuleComplete,
  onGoToSection,
  onBackToDashboard,
  onStartQuiz,
  showQuizButton = true,
  showProgress = true,
  showReadingTime = true,
  variant = 'default', // default, compact, detailed
  className = ''
}) => {
  // ‚úÖ –•–£–ö–ò
  const navigate = useNavigate()
  const { sounds } = useSounds()
  const { colors, reducedMotion } = useDesignSystem()

  // ‚úÖ –°–û–°–¢–û–Ø–ù–ò–ï
  const [mounted, setMounted] = useState(false)
  const [showCompletionModal, setShowCompletionModal] = useState(false)
  const [showSectionList, setShowSectionList] = useState(false)

  // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  useEffect(() => {
    setMounted(true)
  }, [])

  // ‚úÖ –í–´–ß–ò–°–õ–ï–ù–ò–Ø
  const progress = totalSections > 0 ? Math.round((completedSections.length / totalSections) * 100) : 0
  const isFirstSection = currentSection === 0
  const isLastSection = currentSection === totalSections - 1
  const isCurrentSectionCompleted = completedSections.includes(currentSection)
  const isModuleCompleted = progress === 100

  // ‚úÖ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  // ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  const handlePrevSection = () => {
    if (!isFirstSection && onPrevSection) {
      sounds.click()
      onPrevSection()
    }
  }

  const handleNextSection = async () => {
    sounds.click()
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    if (!isCurrentSectionCompleted && onSectionComplete) {
      await onSectionComplete(currentSection)
    }
    
    if (isLastSection) {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      setShowCompletionModal(true)
    } else if (onNextSection) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É
      onNextSection()
    }
  }

  const handleCompleteModule = async () => {
    sounds.achievement()
    setShowCompletionModal(false)
    
    if (onModuleComplete) {
      await onModuleComplete()
    } else {
      notify.success('–ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!', `–ú–æ–¥—É–ª—å ${moduleId} —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–µ–Ω`)
      navigate(`/module/${moduleId}/quiz`)
    }
  }

  const handleStartQuiz = () => {
    sounds.click()
    if (onStartQuiz) {
      onStartQuiz()
    } else {
      navigate(`/module/${moduleId}/quiz`)
    }
  }

  const handleBackToDashboard = () => {
    sounds.click()
    if (onBackToDashboard) {
      onBackToDashboard()
    } else {
      navigate('/dashboard')
    }
  }

  const handleGoToSection = (sectionIndex) => {
    sounds.whoosh()
    if (onGoToSection) {
      onGoToSection(sectionIndex)
    }
    setShowSectionList(false)
  }

  // ‚úÖ –†–ï–ù–î–ï–† –ö–û–ú–ü–ê–ö–¢–ù–û–ô –í–ï–†–°–ò–ò
  const renderCompact = () => (
    <GlassEffect className={`p-4 ${className}`}>
      <div className="flex items-center justify-between">
        
        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <RippleButton
          variant="ghost"
          size="small"
          onClick={handlePrevSection}
          disabled={isFirstSection}
          className="text-white/70 hover:text-white disabled:opacity-50"
        >
          ‚Üê –ù–∞–∑–∞–¥
        </RippleButton>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="flex items-center space-x-3">
          <span className="text-white/70 text-sm">
            {currentSection + 1}/{totalSections}
          </span>
          {showProgress && (
            <div className="w-32">
              <div className="w-full bg-white/10 rounded-full h-2">
                <div 
                  className="bg-gradient-to-r from-primary-500 to-accent-500 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥ */}
        <RippleButton
          variant="glow"
          size="small"
          onClick={handleNextSection}
        >
          {isLastSection ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ'} ‚Üí
        </RippleButton>
      </div>
    </GlassEffect>
  )

  // ‚úÖ –†–ï–ù–î–ï–† –î–ï–¢–ê–õ–¨–ù–û–ô –í–ï–†–°–ò–ò
  const renderDetailed = () => (
    <div className={`space-y-6 ${className}`}>
      
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {showProgress && (
        <GlowEffect color="primary" intensity="low">
          <InteractiveCard variant="premium" className="p-6">
            
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è</h3>
              <span className="text-primary-400 font-medium">{progress}%</span>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="mb-6">
              <div className="w-full bg-white/10 rounded-full h-3 overflow-hidden">
                <div 
                  className={`bg-gradient-to-r from-primary-500 to-accent-500 h-3 rounded-full transition-all duration-1000 ease-out ${!reducedMotion ? 'animate-pulse' : ''}`}
                  style={{ width: `${progress}%` }}
                />
              </div>
              
              <div className="flex items-center justify-between mt-2 text-sm text-white/70">
                <span>{completedSections.length} –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                <span>{totalSections - completedSections.length} –æ—Å—Ç–∞–ª–æ—Å—å</span>
              </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-3 gap-4">
              
              {/* –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª */}
              <div className="text-center">
                <div className="text-2xl font-bold text-primary-400 mb-1">
                  <AnimatedCounter to={currentSection + 1} />
                </div>
                <div className="text-white/70 text-sm">–¢–µ–∫—É—â–∏–π</div>
              </div>

              {/* –ó–∞–≤–µ—Ä—à–µ–Ω–æ */}
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400 mb-1">
                  <AnimatedCounter to={completedSections.length} />
                </div>
                <div className="text-white/70 text-sm">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
              </div>

              {/* –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è */}
              {showReadingTime && (
                <div className="text-center">
                  <div className="text-2xl font-bold text-accent-400 mb-1">
                    <AnimatedCounter to={Math.floor(readingTime / 60)} />
                  </div>
                  <div className="text-white/70 text-sm">–ú–∏–Ω—É—Ç</div>
                </div>
              )}
            </div>
          </InteractiveCard>
        </GlowEffect>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <GlassEffect className="p-6">
        <div className="flex items-center justify-between">
          
          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
          <div className="flex items-center space-x-4">
            <RippleButton
              variant="ghost"
              size="medium"
              onClick={handleBackToDashboard}
              className="text-white/70 hover:text-white"
            >
              üè† –ö –º–æ–¥—É–ª—è–º
            </RippleButton>

            <RippleButton
              variant="secondary"
              size="medium"
              onClick={handlePrevSection}
              disabled={isFirstSection}
              className="disabled:opacity-50"
            >
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
            </RippleButton>
          </div>

          {/* –¶–µ–Ω—Ç—Ä - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–µ–ª–µ */}
          <div className="text-center">
            <div className="text-white font-medium mb-1">
              –†–∞–∑–¥–µ–ª {currentSection + 1} –∏–∑ {totalSections}
            </div>
            {sectionTitles[currentSection] && (
              <div className="text-white/70 text-sm">
                {sectionTitles[currentSection]}
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex items-center space-x-4">
            {totalSections > 3 && (
              <RippleButton
                variant="ghost"
                size="medium"
                onClick={() => setShowSectionList(true)}
                className="text-white/70 hover:text-white"
              >
                üìã –†–∞–∑–¥–µ–ª—ã
              </RippleButton>
            )}

            <RippleButton
              variant="glow"
              size="medium"
              onClick={handleNextSection}
              className="px-6"
            >
              {isLastSection ? (
                <>
                  <span className="mr-2">üéâ</span>
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å
                </>
              ) : (
                <>
                  –°–ª–µ–¥—É—é—â–∏–π
                  <span className="ml-2">‚Üí</span>
                </>
              )}
            </RippleButton>
          </div>
        </div>
      </GlassEffect>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      {(showQuizButton || isModuleCompleted) && (
        <GlassEffect className="p-4">
          <div className="flex items-center justify-center space-x-4">
            
            {showQuizButton && (
              <RippleButton
                variant="secondary"
                size="medium"
                onClick={handleStartQuiz}
                className="px-6"
              >
                üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
              </RippleButton>
            )}

            {isModuleCompleted && (
              <PulseElement>
                <RippleButton
                  variant="success"
                  size="medium"
                  onClick={handleStartQuiz}
                  className="px-6"
                >
                  ‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω - –∫ —Ç–µ—Å—Ç—É!
                </RippleButton>
              </PulseElement>
            )}
          </div>
        </GlassEffect>
      )}
    </div>
  )

  // ‚úÖ –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê
  if (!mounted) {
    return <div className="opacity-0" />
  }

  return (
    <>
      {variant === 'compact' ? renderCompact() : renderDetailed()}

      {/* ‚úÖ –ú–û–î–ê–õ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ú–û–î–£–õ–Ø */}
      <AnimatedModal
        isOpen={showCompletionModal}
        onClose={() => setShowCompletionModal(false)}
        title="–ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω!"
        size="medium"
      >
        <div className="text-center">
          
          {/* –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞ */}
          <div className="w-24 h-24 mx-auto bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mb-6">
            <span className="text-4xl">üéâ</span>
          </div>

          <h3 className="text-2xl font-bold text-white mb-4">
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!
          </h3>

          <p className="text-white/90 mb-6 leading-relaxed">
            –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–∏–ª–∏ –º–æ–¥—É–ª—å {moduleId}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç 
            –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.
          </p>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-2 gap-4 mb-8">
            <div className="text-center p-4 bg-white/5 rounded-lg">
              <div className="text-2xl font-bold text-primary-400 mb-1">
                {totalSections}
              </div>
              <div className="text-white/70 text-sm">–†–∞–∑–¥–µ–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ</div>
            </div>
            
            <div className="text-center p-4 bg-white/5 rounded-lg">
              <div className="text-2xl font-bold text-accent-400 mb-1">
                {formatTime(readingTime)}
              </div>
              <div className="text-white/70 text-sm">–í—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <RippleButton
              variant="glow"
              size="large"
              onClick={handleCompleteModule}
              className="px-8"
            >
              üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
            </RippleButton>
            
            <RippleButton
              variant="secondary"
              size="large"
              onClick={() => {
                setShowCompletionModal(false)
                handleBackToDashboard()
              }}
              className="px-8"
            >
              üè† –ö –º–æ–¥—É–ª—è–º
            </RippleButton>
          </div>
        </div>
      </AnimatedModal>

      {/* ‚úÖ –ú–û–î–ê–õ –°–ü–ò–°–ö–ê –†–ê–ó–î–ï–õ–û–í */}
      <AnimatedModal
        isOpen={showSectionList}
        onClose={() => setShowSectionList(false)}
        title="–†–∞–∑–¥–µ–ª—ã –º–æ–¥—É–ª—è"
        size="large"
      >
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {sectionTitles.map((title, index) => {
            const isCompleted = completedSections.includes(index)
            const isCurrent = index === currentSection
            
            return (
              <InteractiveCard
                key={index}
                variant={isCurrent ? 'glow' : 'glass'}
                className={`p-4 cursor-pointer transition-all duration-300 ${isCurrent ? 'ring-2 ring-primary-400' : ''}`}
                onClick={() => handleGoToSection(index)}
              >
                <div className="flex items-center space-x-4">
                  
                  {/* –ù–æ–º–µ—Ä –∏ –∏–∫–æ–Ω–∫–∞ */}
                  <div className={`
                    w-12 h-12 rounded-lg flex items-center justify-center font-bold
                    ${isCurrent 
                      ? 'bg-primary-500 text-white' 
                      : isCompleted
                        ? 'bg-green-500/20 text-green-400'
                        : 'bg-white/10 text-white/70'
                    }
                  `}>
                    {isCompleted ? '‚úÖ' : index + 1}
                  </div>

                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="flex-1">
                    <h4 className={`font-medium ${isCurrent ? 'text-white' : isCompleted ? 'text-green-300' : 'text-white/90'}`}>
                      {title}
                    </h4>
                    <p className="text-white/60 text-sm">
                      {isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : isCurrent ? '–ò–∑—É—á–∞–µ—Ç—Å—è' : '–ù–µ –∏–∑—É—á–µ–Ω'}
                    </p>
                  </div>

                  {/* –°—Ç–∞—Ç—É—Å */}
                  <div className="text-lg">
                    {isCurrent ? 'üìñ' : isCompleted ? '‚úÖ' : '‚è≥'}
                  </div>
                </div>
              </InteractiveCard>
            )
          })}
        </div>
      </AnimatedModal>

      {/* ‚úÖ –ü–õ–ê–í–ê–Æ–©–ò–ï –ö–ù–û–ü–ö–ò */}
      <FloatingActionButton
        icon="üìã"
        position="bottom-left"
        tooltip="–°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤"
        onClick={() => setShowSectionList(true)}
      />

      {showReadingTime && (
        <FloatingActionButton
          icon="‚è±Ô∏è"
          position="bottom-right"
          tooltip={`–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: ${formatTime(readingTime)}`}
          onClick={() => {
            sounds.click()
            notify.info('–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è', `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${formatTime(readingTime)}`)
          }}
        />
      )}
    </>
  )
}

export default ModuleFooter