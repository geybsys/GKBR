// module1_sro.jsx - –ú–æ–¥—É–ª—å "–°–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
// –ü—É—Ç—å: src/blocks/module_core/module1_sro.jsx

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { contentApi } from '../../api/mockContentApi.js'

const Module1SRO = ({ userData, userProgress, onUpdateProgress }) => {
  const navigate = useNavigate()
  const [moduleData, setModuleData] = useState(null)
  const [currentSection, setCurrentSection] = useState(0)
  const [isLoading, setIsLoading] = useState(true)
  const [sectionProgress, setSectionProgress] = useState({})

  useEffect(() => {
    loadModuleData()
  }, [])

  const loadModuleData = async () => {
    try {
      setIsLoading(true)
      const data = await contentApi.fetchModuleContent(1)
      setModuleData(data)
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const moduleProgress = userProgress?.moduleProgress?.[1]
      if (moduleProgress?.currentSection) {
        setCurrentSection(moduleProgress.currentSection)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –°–†–û:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const completeSection = (sectionIndex) => {
    const newProgress = {
      ...sectionProgress,
      [sectionIndex]: true
    }
    setSectionProgress(newProgress)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (onUpdateProgress) {
      onUpdateProgress(1, {
        currentSection: sectionIndex + 1,
        completedSections: Object.keys(newProgress).map(Number),
        lastAccessedAt: new Date().toISOString()
      })
    }
  }

  const startQuiz = () => {
    navigate('/quiz/1')
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-blue-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4 animate-bounce">üìã</div>
          <h2 className="text-2xl font-bold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –°–†–û...</h2>
        </div>
      </div>
    )
  }

  if (!moduleData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-red-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">‚ùå</div>
          <h2 className="text-2xl font-bold text-white mb-4">–ú–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h2>
          <button 
            onClick={() => navigate('/dashboard')}
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-blue-900">
      
      {/* –•–µ–¥–µ—Ä –º–æ–¥—É–ª—è */}
      <div className="bg-white/10 backdrop-blur-lg border-b border-white/20 sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-white">{moduleData.title}</h1>
              <p className="text-blue-200">{moduleData.description}</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right text-sm">
                <div className="text-white font-semibold">–†–∞–∑–¥–µ–ª {currentSection + 1}</div>
                <div className="text-blue-200">–∏–∑ {moduleData.sections.length}</div>
              </div>
              <button 
                onClick={() => navigate('/dashboard')}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm"
              >
                ‚Üê –í—ã—Ö–æ–¥
              </button>
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div className="mt-4 w-full bg-white/20 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentSection) / moduleData.sections.length) * 100}%` }}
            ></div>
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        
        {/* –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª */}
        {moduleData.sections[currentSection] && (
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 mb-8">
            <div className="flex items-center mb-6">
              <span className="text-4xl mr-4">
                {moduleData.sections[currentSection].type === 'theory' ? 'üìñ' : 'üí°'}
              </span>
              <div>
                <h2 className="text-3xl font-bold text-white">
                  {moduleData.sections[currentSection].title}
                </h2>
                <p className="text-blue-200 mt-2">
                  ‚è±Ô∏è {moduleData.sections[currentSection].estimatedTime} ‚Ä¢ 
                  {moduleData.sections[currentSection].type === 'theory' ? ' –¢–µ–æ—Ä–∏—è' : ' –ü—Ä–∞–∫—Ç–∏–∫–∞'}
                </p>
              </div>
            </div>

            <div className="prose prose-invert max-w-none">
              <div className="text-gray-200 text-lg leading-relaxed">
                {moduleData.sections[currentSection].content}
              </div>
              
              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –°–†–û */}
              {currentSection === 0 && (
                <div className="mt-8 bg-blue-500/20 border border-blue-400/50 rounded-lg p-6">
                  <h3 className="text-xl font-bold text-blue-300 mb-4">üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è</h3>
                  <ul className="space-y-2 text-blue-100">
                    <li>‚Ä¢ <strong>–°–†–û</strong> - –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–∏</li>
                    <li>‚Ä¢ <strong>–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥</strong> - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç</li>
                    <li>‚Ä¢ <strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –°–†–û</strong> - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</li>
                    <li>‚Ä¢ <strong>–ö–æ–Ω—Ç—Ä–æ–ª—å</strong> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —á–ª–µ–Ω–∞–º–∏ –°–†–û</li>
                  </ul>
                </div>
              )}

              {currentSection === 1 && (
                <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="bg-green-500/20 border border-green-400/50 rounded-lg p-4">
                    <h4 className="text-lg font-bold text-green-300 mb-3">‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h4>
                    <ul className="text-green-100 space-y-1">
                      <li>‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤</li>
                      <li>‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</li>
                      <li>‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</li>
                      <li>‚Ä¢ –í–µ–¥–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ —á–ª–µ–Ω–æ–≤</li>
                    </ul>
                  </div>
                  <div className="bg-orange-500/20 border border-orange-400/50 rounded-lg p-4">
                    <h4 className="text-lg font-bold text-orange-300 mb-3">‚öñÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
                    <ul className="text-orange-100 space-y-1">
                      <li>‚Ä¢ –ú–∏–Ω–∏–º—É–º 100 —á–ª–µ–Ω–æ–≤</li>
                      <li>‚Ä¢ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥</li>
                      <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è</li>
                      <li>‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
                    </ul>
                  </div>
                </div>
              )}
            </div>

            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É */}
            <div className="flex items-center justify-between mt-8 pt-6 border-t border-white/20">
              <button 
                onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}
                disabled={currentSection === 0}
                className="bg-gray-600 hover:bg-gray-700 disabled:bg-gray-800 disabled:opacity-50 text-white font-bold py-3 px-6 rounded-lg transition-colors"
              >
                ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª
              </button>

              <div className="text-center text-white">
                <button 
                  onClick={() => completeSection(currentSection)}
                  className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors"
                  disabled={sectionProgress[currentSection]}
                >
                  {sectionProgress[currentSection] ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–¥–µ–ª'}
                </button>
              </div>

              {currentSection < moduleData.sections.length - 1 ? (
                <button 
                  onClick={() => setCurrentSection(currentSection + 1)}
                  className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                >
                  –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí
                </button>
              ) : (
                <button 
                  onClick={startQuiz}
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                >
                  –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üß†
                </button>
              )}
            </div>
          </div>
        )}

        {/* –û–±–∑–æ—Ä –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
          <h3 className="text-xl font-bold text-white mb-4">üìö –†–∞–∑–¥–µ–ª—ã –º–æ–¥—É–ª—è</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {moduleData.sections.map((section, index) => (
              <button
                key={index}
                onClick={() => setCurrentSection(index)}
                className={`text-left p-4 rounded-lg border-2 transition-all ${
                  index === currentSection
                    ? 'bg-blue-600/50 border-blue-400 text-white'
                    : sectionProgress[index]
                    ? 'bg-green-600/30 border-green-400 text-green-100'
                    : 'bg-white/5 border-white/20 text-gray-300 hover:bg-white/10'
                }`}
              >
                <div className="flex items-center justify-between mb-2">
                  <span className="text-2xl">
                    {section.type === 'theory' ? 'üìñ' : 'üí°'}
                  </span>
                  {sectionProgress[index] && <span className="text-green-400">‚úÖ</span>}
                  {index === currentSection && <span className="text-blue-400">üëÅÔ∏è</span>}
                </div>
                <h4 className="font-semibold mb-1">{section.title}</h4>
                <p className="text-sm opacity-75">{section.estimatedTime}</p>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

export default Module1SRO