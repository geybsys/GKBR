// auditLogger.js - –°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ü—É—Ç—å: src/utils/auditLogger.js

// üìù –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
export const auditLogger = {
  // üìä –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  log(action, data = {}) {
    try {
      const logEntry = {
        id: this.generateLogId(),
        timestamp: new Date().toISOString(),
        action: action,
        data: data,
        userAgent: navigator.userAgent,
        url: window.location.href,
        sessionId: this.getCurrentSessionId()
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      this.saveToStorage(logEntry)

      // –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (this.isDevMode()) {
        console.log(`[AUDIT] ${action}:`, logEntry)
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (this.shouldSendToServer(action)) {
        this.sendToServer(logEntry)
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    }
  },

  // üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ª–æ–≥–∞
  generateLogId() {
    return `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },

  // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ session ID
  getCurrentSessionId() {
    try {
      const userData = localStorage.getItem('gkbr_user_data')
      if (userData) {
        const parsed = JSON.parse(userData)
        return parsed.sessionId || 'unknown'
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    return 'no_session'
  },

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  saveToStorage(logEntry) {
    try {
      const existingLogs = this.getLogs()
      existingLogs.push(logEntry)

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
      const maxLogs = 1000
      if (existingLogs.length > maxLogs) {
        existingLogs.splice(0, existingLogs.length - maxLogs)
      }

      localStorage.setItem('gkbr_audit_logs', JSON.stringify(existingLogs))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞:', error)
    }
  },

  // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
  getLogs() {
    try {
      const logs = localStorage.getItem('gkbr_audit_logs')
      return logs ? JSON.parse(logs) : []
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error)
      return []
    }
  },

  // üîç –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  searchLogs(criteria = {}) {
    const logs = this.getLogs()
    
    return logs.filter(log => {
      if (criteria.action && log.action !== criteria.action) return false
      if (criteria.userId && log.data.userId !== criteria.userId) return false
      if (criteria.sessionId && log.sessionId !== criteria.sessionId) return false
      if (criteria.dateFrom && new Date(log.timestamp) < new Date(criteria.dateFrom)) return false
      if (criteria.dateTo && new Date(log.timestamp) > new Date(criteria.dateTo)) return false
      return true
    })
  },

  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–≥–∞–º
  getLogStats() {
    const logs = this.getLogs()
    const stats = {
      total: logs.length,
      byAction: {},
      byHour: {},
      lastActivity: null
    }

    logs.forEach(log => {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
      stats.byAction[log.action] = (stats.byAction[log.action] || 0) + 1

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
      const hour = new Date(log.timestamp).getHours()
      stats.byHour[hour] = (stats.byHour[hour] || 0) + 1

      // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (!stats.lastActivity || new Date(log.timestamp) > new Date(stats.lastActivity)) {
        stats.lastActivity = log.timestamp
      }
    })

    return stats
  },

  // üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
  clearOldLogs(daysToKeep = 30) {
    try {
      const logs = this.getLogs()
      const cutoffDate = new Date()
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep)

      const filteredLogs = logs.filter(log => 
        new Date(log.timestamp) > cutoffDate
      )

      localStorage.setItem('gkbr_audit_logs', JSON.stringify(filteredLogs))
      
      return logs.length - filteredLogs.length // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error)
      return 0
    }
  },

  // üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendToServer(logEntry) {
    try {
      // –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–º–∏—Ç–∞—Ü–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç fetch –∫ API
      if (this.isDevMode()) {
        console.log('[AUDIT] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', logEntry)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error)
    }
  },

  // üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  isDevMode() {
    return import.meta.env.DEV || localStorage.getItem('gkbr_debug_mode') === 'true'
  },

  // üì§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  shouldSendToServer(action) {
    const serverActions = [
      'user_login',
      'user_logout', 
      'module_completed',
      'quiz_completed',
      'certificate_generated',
      'security_violation'
    ]
    return serverActions.includes(action)
  },

  // üì± –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
  exportLogs(format = 'json') {
    const logs = this.getLogs()
    
    if (format === 'json') {
      return JSON.stringify(logs, null, 2)
    }
    
    if (format === 'csv') {
      const headers = ['ID', 'Timestamp', 'Action', 'Session ID', 'User ID', 'URL']
      const rows = logs.map(log => [
        log.id,
        log.timestamp,
        log.action,
        log.sessionId,
        log.data.userId || '',
        log.url
      ])
      
      return [headers, ...rows].map(row => row.join(',')).join('\n')
    }

    return logs
  },

  // üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  
  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  logLogin(userData) {
    this.log('user_login', {
      userId: userData.id,
      role: userData.role,
      sessionId: userData.sessionId
    })
  },

  // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  logLogout(userData, duration) {
    this.log('user_logout', {
      userId: userData?.id,
      sessionId: userData?.sessionId,
      sessionDuration: duration
    })
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
  logModuleCompletion(moduleId, score, timeSpent) {
    this.log('module_completed', {
      moduleId,
      score,
      timeSpent,
      userId: this.getCurrentUserId()
    })
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
  logQuizCompletion(moduleId, score, answers) {
    this.log('quiz_completed', {
      moduleId,
      score,
      totalQuestions: answers.length,
      userId: this.getCurrentUserId()
    })
  },

  // –û—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  logError(error, context = {}) {
    this.log('app_error', {
      error: error.message || error,
      stack: error.stack,
      context,
      userId: this.getCurrentUserId()
    })
  },

  // –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  logSecurityViolation(violation, details = {}) {
    this.log('security_violation', {
      violation,
      details,
      userId: this.getCurrentUserId(),
      urgent: true
    })
  },

  // üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ user ID
  getCurrentUserId() {
    try {
      const userData = localStorage.getItem('gkbr_user_data')
      if (userData) {
        const parsed = JSON.parse(userData)
        return parsed.id || 'unknown'
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    return 'anonymous'
  }
}

export default auditLogger