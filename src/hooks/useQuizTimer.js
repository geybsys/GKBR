// useQuizTimer.js - –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º –∫–≤–∏–∑–æ–≤
// –ü—É—Ç—å: src/hooks/useQuizTimer.js

import { useState, useEffect, useRef } from 'react'

export const useQuizTimer = (initialSeconds = 1800) => { // 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [timeLeft, setTimeLeft] = useState(initialSeconds)
  const [isRunning, setIsRunning] = useState(false)
  const [isPaused, setIsPaused] = useState(false)
  const intervalRef = useRef(null)
  const startTimeRef = useRef(null)
  const pausedTimeRef = useRef(0)

  // ‚úÖ –°–¢–ê–†–¢ –¢–ê–ô–ú–ï–†–ê
  const startTimer = () => {
    if (!isRunning && !isPaused) {
      setIsRunning(true)
      startTimeRef.current = Date.now()
    } else if (isPaused) {
      setIsRunning(true)
      setIsPaused(false)
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
      startTimeRef.current = Date.now() - pausedTimeRef.current
    }
  }

  // ‚úÖ –ü–ê–£–ó–ê –¢–ê–ô–ú–ï–†–ê
  const pauseTimer = () => {
    if (isRunning) {
      setIsRunning(false)
      setIsPaused(true)
      pausedTimeRef.current = Date.now() - startTimeRef.current
    }
  }

  // ‚úÖ –û–°–¢–ê–ù–û–í–ö–ê –¢–ê–ô–ú–ï–†–ê
  const stopTimer = () => {
    setIsRunning(false)
    setIsPaused(false)
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }

  // ‚úÖ –°–ë–†–û–° –¢–ê–ô–ú–ï–†–ê
  const resetTimer = (newTime = initialSeconds) => {
    stopTimer()
    setTimeLeft(newTime)
    pausedTimeRef.current = 0
  }

  // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –í–†–ï–ú–Ø
  const addTime = (seconds) => {
    setTimeLeft(prev => prev + seconds)
  }

  // ‚úÖ –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–®–ï–î–®–ï–ï –í–†–ï–ú–Ø
  const getElapsedTime = () => {
    if (!startTimeRef.current) return 0
    
    if (isRunning) {
      return Math.floor((Date.now() - startTimeRef.current) / 1000)
    } else if (isPaused) {
      return Math.floor(pausedTimeRef.current / 1000)
    }
    
    return 0
  }

  // ‚úÖ –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–ì–†–ï–°–° –í –ü–†–û–¶–ï–ù–¢–ê–•
  const getProgress = () => {
    return ((initialSeconds - timeLeft) / initialSeconds) * 100
  }

  // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –í–†–ï–ú–ï–ù–ò
  const isCriticalTime = () => {
    return timeLeft <= 300 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
  }

  const isWarningTime = () => {
    return timeLeft <= 600 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
  }

  // ‚úÖ –û–°–ù–û–í–ù–û–ô –≠–§–§–ï–ö–¢ –¢–ê–ô–ú–ï–†–ê
  useEffect(() => {
    if (isRunning && timeLeft > 0) {
      intervalRef.current = setInterval(() => {
        setTimeLeft(prevTime => {
          if (prevTime <= 1) {
            setIsRunning(false)
            return 0
          }
          return prevTime - 1
        })
      }, 1000)
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [isRunning, timeLeft])

  // ‚úÖ –≠–§–§–ï–ö–¢ –î–õ–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô
  useEffect(() => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (timeLeft === 300) {
      console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!')
    } else if (timeLeft === 60) {
      console.log('üö® –û—Å—Ç–∞–ª–æ—Å—å 1 –º–∏–Ω—É—Ç–∞!')
    } else if (timeLeft === 0) {
      console.log('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!')
    }
  }, [timeLeft])

  return {
    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    timeLeft,
    isRunning,
    isPaused,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    startTimer,
    pauseTimer,
    stopTimer,
    resetTimer,
    addTime,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getElapsedTime,
    getProgress,
    isCriticalTime,
    isWarningTime,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
    isTimeUp: timeLeft === 0,
    progressPercentage: getProgress()
  }
}

export default useQuizTimer