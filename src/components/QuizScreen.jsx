// QuizScreen.jsx - –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–≤–∏–∑–æ–≤ —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
// –ü—É—Ç—å: src/components/QuizScreen.jsx

import React, { useState, useEffect, useRef } from 'react'
import { useParams, useNavigate } from 'react-router-dom'

// –•—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
import { useQuizTimer } from '../hooks/useQuizTimer.js'
import { shuffleArray } from '../utils/shuffleArray.js'
import { formatTimer } from '../utils/formatTimer.js'

// API (–∑–∞–≥–ª—É—à–∫–∏)
import { contentApi } from '../api/mockContentApi.js'
import { progressApi } from '../api/mockProgressApi.js'

const QuizScreen = ({ userData, userProgress, onUpdateProgress }) => {
  // ‚úÖ –ü–ê–†–ê–ú–ï–¢–†–´ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
  const { moduleId } = useParams()
  const navigate = useNavigate()
  
  // ‚úÖ –°–û–°–¢–û–Ø–ù–ò–ï –ö–í–ò–ó–ê
  const [questions, setQuestions] = useState([])
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState({})
  const [isLoading, setIsLoading] = useState(true)
  const [showResults, setShowResults] = useState(false)
  const [quizStarted, setQuizStarted] = useState(false)
  const [error, setError] = useState(null)
  
  // ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  const [score, setScore] = useState(0)
  const [correctAnswers, setCorrectAnswers] = useState(0)
  const [earnedBadges, setEarnedBadges] = useState([])
  
  // ‚úÖ –¢–ê–ô–ú–ï–† –ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨
  const { timeLeft, startTimer, stopTimer, resetTimer } = useQuizTimer(30 * 60) // 30 –º–∏–Ω—É—Ç
  const [questionStartTime, setQuestionStartTime] = useState(Date.now())
  const [totalQuizTime, setTotalQuizTime] = useState(0)
  
  // ‚úÖ –°–°–´–õ–ö–ò
  const questionRef = useRef(null)

  // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–í–ò–ó–ê
  useEffect(() => {
    if (moduleId) {
      loadQuizData()
    }
  }, [moduleId])

  // ‚úÖ AUTO-SUBMIT –ü–†–ò –û–ö–û–ù–ß–ê–ù–ò–ò –í–†–ï–ú–ï–ù–ò
  useEffect(() => {
    if (timeLeft === 0 && quizStarted && !showResults) {
      handleSubmitQuiz()
    }
  }, [timeLeft, quizStarted, showResults])

  // ‚úÖ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ö–í–ò–ó–ê
  const loadQuizData = async () => {
    setIsLoading(true)
    setError(null)
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–¥—É–ª—è
      const quizData = await contentApi.fetchQuizQuestions(moduleId)
      
      if (!quizData || !quizData.questions || quizData.questions.length === 0) {
        throw new Error(`–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–¥—É–ª—è ${moduleId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      }
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      const shuffledQuestions = shuffleArray(quizData.questions).map(question => ({
        ...question,
        options: shuffleArray(question.options || [])
      }))
      
      setQuestions(shuffledQuestions)
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${shuffledQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è ${moduleId}`)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∏–∑–∞:', error)
      setError(error.message)
    } finally {
      setIsLoading(false)
    }
  }

  // ‚úÖ –°–¢–ê–†–¢ –ö–í–ò–ó–ê
  const startQuiz = () => {
    setQuizStarted(true)
    setQuestionStartTime(Date.now())
    startTimer()
    
    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    if (questionRef.current) {
      questionRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }

  // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
  const handleAnswer = (questionId, selectedOption) => {
    const newAnswers = {
      ...answers,
      [questionId]: {
        selected: selectedOption,
        timeSpent: Date.now() - questionStartTime,
        timestamp: Date.now()
      }
    }
    
    setAnswers(newAnswers)
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        nextQuestion()
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setCurrentQuestion(questions.length)
      }
    }, 1000)
  }

  // ‚úÖ –°–õ–ï–î–£–Æ–©–ò–ô –í–û–ü–†–û–°
  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
      setQuestionStartTime(Date.now())
      
      if (questionRef.current) {
        questionRef.current.scrollIntoView({ behavior: 'smooth' })
      }
    }
  }

  // ‚úÖ –ü–†–ï–î–´–î–£–©–ò–ô –í–û–ü–†–û–°
  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1)
      setQuestionStartTime(Date.now())
      
      if (questionRef.current) {
        questionRef.current.scrollIntoView({ behavior: 'smooth' })
      }
    }
  }

  // ‚úÖ –ü–û–î–°–ß–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
  const calculateResults = () => {
    let correct = 0
    let totalScore = 0
    const maxScore = questions.length * 100 // 100 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    
    questions.forEach(question => {
      const userAnswer = answers[question.id]
      if (userAnswer && userAnswer.selected === question.correctAnswer) {
        correct++
        
        // –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –±—ã—Å—Ç—Ä–æ)
        const timeBonus = userAnswer.timeSpent < 10000 ? 20 : 0 // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ 10 —Å–µ–∫
        totalScore += 100 + timeBonus
      }
    })
    
    return {
      correct,
      total: questions.length,
      score: totalScore,
      maxScore,
      percentage: Math.round((correct / questions.length) * 100)
    }
  }

  // ‚úÖ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–†–ê–ë–û–¢–ê–ù–ù–´–• –ó–ù–ê–ß–ö–û–í
  const calculateEarnedBadges = (results) => {
    const badges = []
    
    if (results.percentage >= 90) {
      badges.push({ id: 'perfect', name: '–ú–∞—Å—Ç–µ—Ä', icon: 'üèÜ', description: '–†–µ–∑—É–ª—å—Ç–∞—Ç 90%+' })
    } else if (results.percentage >= 80) {
      badges.push({ id: 'excellent', name: '–≠–∫—Å–ø–µ—Ä—Ç', icon: '‚≠ê', description: '–†–µ–∑—É–ª—å—Ç–∞—Ç 80%+' })
    } else if (results.percentage >= 70) {
      badges.push({ id: 'good', name: '–ó–Ω–∞—Ç–æ–∫', icon: '‚úÖ', description: '–†–µ–∑—É–ª—å—Ç–∞—Ç 70%+' })
    }
    
    // –ë–æ–Ω—É—Å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
    const totalTime = Object.values(answers).reduce((sum, answer) => sum + answer.timeSpent, 0)
    if (totalTime < questions.length * 15000) { // –ú–µ–Ω–µ–µ 15 —Å–µ–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Å—Ä–µ–¥–Ω–µ–º
      badges.push({ id: 'speed', name: '–°–∫–æ—Ä–æ—Å—Ç—å', icon: '‚ö°', description: '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã' })
    }
    
    return badges
  }

  // ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–í–ò–ó–ê
  const handleSubmitQuiz = async () => {
    stopTimer()
    
    const results = calculateResults()
    const badges = calculateEarnedBadges(results)
    
    setScore(results.score)
    setCorrectAnswers(results.correct)
    setEarnedBadges(badges)
    setTotalQuizTime(30 * 60 - timeLeft) // –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    setShowResults(true)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    try {
      const newProgress = {
        moduleId: parseInt(moduleId),
        completed: true,
        score: results.score,
        percentage: results.percentage,
        correctAnswers: results.correct,
        totalQuestions: questions.length,
        timeSpent: totalQuizTime,
        earnedBadges: badges,
        completedAt: new Date().toISOString(),
        answers: answers
      }
      
      await progressApi.saveQuizProgress(userData.id, newProgress)
      
      if (onUpdateProgress) {
        onUpdateProgress(moduleId, newProgress)
      }
      
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', newProgress)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error)
    }
  }

  // ‚úÖ –í–û–ó–í–†–ê–¢ –ö –ú–û–î–£–õ–Æ
  const backToModule = () => {
    navigate(`/module/${moduleId}`)
  }

  // ‚úÖ –ü–û–í–¢–û–†–ò–¢–¨ –ö–í–ò–ó
  const retakeQuiz = () => {
    setCurrentQuestion(0)
    setAnswers({})
    setShowResults(false)
    setQuizStarted(false)
    setScore(0)
    setCorrectAnswers(0)
    setEarnedBadges([])
    resetTimer()
    loadQuizData()
  }

  // ‚úÖ –≠–ö–†–ê–ù –ó–ê–ì–†–£–ó–ö–ò
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-blue-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4 animate-bounce">üß†</div>
          <h2 className="text-2xl font-bold text-white mb-2">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–≤–∏–∑–∞...</h2>
          <p className="text-blue-200">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–¥—É–ª—è {moduleId}</p>
          <div className="mt-6">
            <div className="w-48 h-2 bg-white/20 rounded-full mx-auto">
              <div className="h-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full animate-pulse w-2/3"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ‚úÖ –≠–ö–†–ê–ù –û–®–ò–ë–ö–ò
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-red-900 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-6xl mb-4">‚ùå</div>
          <h2 className="text-2xl font-bold text-white mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p className="text-red-200 mb-6">{error}</p>
          <div className="space-y-3">
            <button 
              onClick={() => loadQuizData()}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <button 
              onClick={() => navigate('/dashboard')}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    )
  }

  // ‚úÖ –≠–ö–†–ê–ù –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
  if (showResults) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-green-900 py-8">
        <div className="max-w-4xl mx-auto px-4">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
          <div className="text-center mb-8">
            <div className="text-6xl mb-4">üéâ</div>
            <h1 className="text-4xl font-bold text-white mb-2">–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</h1>
            <p className="text-green-200">–ú–æ–¥—É–ª—å {moduleId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω</p>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            
            {/* –°—á–µ—Ç */}
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20 text-center">
              <div className="text-3xl font-bold text-yellow-400 mb-2">{score}</div>
              <div className="text-white text-lg">–ë–∞–ª–ª–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ</div>
              <div className="text-green-200 text-sm mt-1">
                {Math.round((score / (questions.length * 100)) * 100)}% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã */}
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20 text-center">
              <div className="text-3xl font-bold text-green-400 mb-2">
                {correctAnswers}/{questions.length}
              </div>
              <div className="text-white text-lg">–ü—Ä–∞–≤–∏–ª—å–Ω–æ</div>
              <div className="text-green-200 text-sm mt-1">
                {Math.round((correctAnswers / questions.length) * 100)}% —Ç–æ—á–Ω–æ—Å—Ç—å
              </div>
            </div>

            {/* –í—Ä–µ–º—è */}
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20 text-center">
              <div className="text-3xl font-bold text-blue-400 mb-2">
                {formatTimer(totalQuizTime)}
              </div>
              <div className="text-white text-lg">–í—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
              <div className="text-green-200 text-sm mt-1">
                {Math.round(totalQuizTime / questions.length / 1000)} —Å–µ–∫/–≤–æ–ø—Ä–æ—Å
              </div>
            </div>
          </div>

          {/* –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏ */}
          {earnedBadges.length > 0 && (
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20 mb-8">
              <h3 className="text-xl font-bold text-white mb-4 text-center">
                üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {earnedBadges.map(badge => (
                  <div key={badge.id} className="flex items-center space-x-3 bg-white/5 rounded-lg p-3">
                    <span className="text-3xl">{badge.icon}</span>
                    <div>
                      <div className="text-white font-semibold">{badge.name}</div>
                      <div className="text-gray-300 text-sm">{badge.description}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex flex-col md:flex-row gap-4 justify-center">
            <button 
              onClick={backToModule}
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–¥—É–ª—é
            </button>
            <button 
              onClick={retakeQuiz}
              className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-lg transition-colors"
            >
              –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
            </button>
            <button 
              onClick={() => navigate('/dashboard')}
              className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-8 rounded-lg transition-colors"
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    )
  }

  // ‚úÖ –≠–ö–†–ê–ù –°–¢–ê–†–¢–ê –ö–í–ò–ó–ê
  if (!quizStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-purple-900 flex items-center justify-center">
        <div className="max-w-2xl mx-auto p-6 text-center">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20">
            
            <div className="text-6xl mb-6">üß†</div>
            <h1 className="text-3xl font-bold text-white mb-4">
              –ö–≤–∏–∑ –ø–æ –º–æ–¥—É–ª—é {moduleId}
            </h1>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 text-center">
              <div>
                <div className="text-2xl font-bold text-blue-400">{questions.length}</div>
                <div className="text-blue-200 text-sm">–≤–æ–ø—Ä–æ—Å–æ–≤</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-400">30</div>
                <div className="text-green-200 text-sm">–º–∏–Ω—É—Ç</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-yellow-400">100</div>
                <div className="text-yellow-200 text-sm">–±–∞–ª–ª–æ–≤/–≤–æ–ø—Ä–æ—Å</div>
              </div>
            </div>

            <div className="text-gray-300 mb-8 space-y-2">
              <p>‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å</p>
              <p>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</p>
              <p>‚Ä¢ –ó–∞ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–∞—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã</p>
              <p>‚Ä¢ –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º</p>
            </div>

            <div className="space-y-4">
              <button 
                onClick={startQuiz}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-bold py-4 px-8 rounded-lg transition-all transform hover:scale-105"
              >
                üöÄ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑
              </button>
              
              <button 
                onClick={() => navigate(`/module/${moduleId}`)}
                className="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–¥—É–ª—é
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ‚úÖ –û–°–ù–û–í–ù–û–ô –≠–ö–†–ê–ù –ö–í–ò–ó–ê
  const currentQuestionData = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-blue-900 py-8">
      <div className="max-w-4xl mx-auto px-4">
        
        {/* –•–µ–¥–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Ç–∞–π–º–µ—Ä–æ–º */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20 mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="text-white">
              <h1 className="text-xl font-bold">–ú–æ–¥—É–ª—å {moduleId}</h1>
              <p className="text-blue-200">–í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}</p>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-yellow-400">{formatTimer(timeLeft)}</div>
              <div className="text-blue-200 text-sm">–≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å</div>
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div className="w-full bg-white/20 rounded-full h-3">
            <div 
              className="bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
        </div>

        {/* –í–æ–ø—Ä–æ—Å */}
        <div ref={questionRef} className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 mb-8">
          <h2 className="text-2xl font-bold text-white mb-6 leading-relaxed">
            {currentQuestionData?.question}
          </h2>
          
          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ */}
          <div className="space-y-4">
            {currentQuestionData?.options?.map((option, index) => {
              const isSelected = answers[currentQuestionData.id]?.selected === option
              const optionLetter = String.fromCharCode(65 + index) // A, B, C, D
              
              return (
                <button
                  key={index}
                  onClick={() => handleAnswer(currentQuestionData.id, option)}
                  className={`w-full text-left p-4 rounded-lg border-2 transition-all transform hover:scale-105 ${
                    isSelected
                      ? 'bg-blue-600/50 border-blue-400 text-white'
                      : 'bg-white/5 border-white/20 text-gray-200 hover:bg-white/10 hover:border-white/40'
                  }`}
                >
                  <div className="flex items-center">
                    <span className={`w-8 h-8 rounded-full mr-4 flex items-center justify-center font-bold ${
                      isSelected ? 'bg-blue-400 text-white' : 'bg-white/20 text-gray-300'
                    }`}>
                      {optionLetter}
                    </span>
                    <span className="flex-1">{option}</span>
                  </div>
                </button>
              )
            })}
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex items-center justify-between">
          <button 
            onClick={prevQuestion}
            disabled={currentQuestion === 0}
            className="bg-gray-600 hover:bg-gray-700 disabled:bg-gray-800 disabled:opacity-50 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>

          <div className="text-center text-white">
            <div className="text-sm text-blue-200">
              –û—Ç–≤–µ—á–µ–Ω–æ: {Object.keys(answers).length} –∏–∑ {questions.length}
            </div>
          </div>

          {currentQuestion < questions.length - 1 ? (
            <button 
              onClick={nextQuestion}
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
            >
              –î–∞–ª–µ–µ ‚Üí
            </button>
          ) : (
            <button 
              onClick={handleSubmitQuiz}
              className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
            >
              –ó–∞–≤–µ—Ä—à–∏—Ç—å üèÅ
            </button>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ */}
        <div className="mt-8 flex flex-wrap gap-2 justify-center">
          {questions.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentQuestion(index)}
              className={`w-8 h-8 rounded-full text-sm font-bold transition-all ${
                answers[questions[index]?.id]
                  ? 'bg-green-500 text-white'
                  : index === currentQuestion
                  ? 'bg-blue-500 text-white'
                  : 'bg-white/20 text-gray-300 hover:bg-white/30'
              }`}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}

export default QuizScreen