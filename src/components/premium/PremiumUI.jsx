// PremiumUI.jsx - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ UI —Å–∏—Å—Ç–µ–º—ã
// –ü—É—Ç—å: src/components/premium/PremiumUI.jsx

import React from 'react'

// üé® –ò–ú–ü–û–†–¢ –í–°–ï–• –ü–†–ï–ú–ò–ê–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í

// –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
import { 
  ThemeProvider, 
  useTheme, 
  PremiumCard, 
  PremiumButton, 
  PremiumInput, 
  ThemeSelector, 
  AnimationToggle 
} from './PremiumTheme'

import { 
  SoundProvider, 
  useSounds, 
  SoundSettings, 
  useSoundOnMount, 
  useSoundOnChange, 
  SoundTrigger 
} from './SoundSystem'

import { 
  DesignSystemProvider, 
  useDesignSystem 
} from './DesignSystem'

// –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
import { 
  GlowEffect, 
  GlassEffect, 
  GradientBackground, 
  ShimmerEffect, 
  WaveEffect, 
  ParallaxEffect, 
  ParticleCursor 
} from './VisualEffects'

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { 
  AnimatedCounter, 
  TypewriterEffect, 
  MagneticElement, 
  PulseElement, 
  ParticleSystem, 
  WaveAnimation, 
  SpinningLoader, 
  AnimatedProgressLine 
} from './AnimatedComponents'

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
import { 
  InteractiveCard, 
  RippleButton, 
  AnimatedModal, 
  AnimatedToggle, 
  AnimatedProgress, 
  FloatingActionButton, 
  AnimatedAvatar 
} from './InteractiveElements'

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
import { 
  GradientSpinner, 
  AnimatedProgressBar, 
  DotsLoader, 
  WaveLoader, 
  PulseLoader, 
  SkeletonLoader, 
  CardSkeleton, 
  LoadingOverlay, 
  StepLoader 
} from './LoadingStates'

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ–Ω—ã
import AnimatedBackground, { 
  ParticleBackground, 
  WaveBackground, 
  MatrixBackground, 
  NeuralBackground, 
  GeometricBackground, 
  StarBackground, 
  BackgroundSelector 
} from './AnimatedBackground'

// –ú–∏–∫—Ä–æ–∞–Ω–∏–º–∞—Ü–∏–∏
import {
  ScrollReveal,
  HoverEffect,
  StaggeredReveal,
  RippleEffect,
  AnimatedNumber,
  ContentLoader,
  MorphTransition,
  ShakeAnimation,
  AttentionPulse
} from './MicroAnimations'

// üéØ –ì–õ–ê–í–ù–´–ô –ü–†–û–í–ê–ô–î–ï–† –ü–†–ï–ú–ò–ê–õ–¨–ù–û–ì–û UI
export const PremiumUIProvider = ({ children }) => {
  return (
    <DesignSystemProvider>
      <SoundProvider>
        <ThemeProvider>
          {children}
        </ThemeProvider>
      </SoundProvider>
    </DesignSystemProvider>
  )
}

// üåü –ì–û–¢–û–í–´–ï –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –°–¢–†–ê–ù–ò–¶–´-–û–ë–ï–†–¢–ö–ò
export const PremiumPage = ({ 
  children, 
  background = 'particles',
  backgroundIntensity = 'medium',
  backgroundInteractive = true,
  showFloatingSettings = false,
  theme = 'auto',
  className = '',
  ...props
}) => {
  const { theme: currentTheme } = useTheme()
  
  return (
    <div className={`min-h-screen ${className}`} {...props}>
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <AnimatedBackground
        variant={background}
        intensity={backgroundIntensity}
        interactive={backgroundInteractive}
        color={currentTheme?.colors?.primary || '#3b82f6'}
        className="absolute inset-0"
      />
      
      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="relative z-10 min-h-screen">
        {children}
      </div>
      
      {/* –ü–ª–∞–≤–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {showFloatingSettings && (
        <PremiumSettingsButton />
      )}
    </div>
  )
}

// üîß –ü–õ–ê–í–ê–Æ–©–ê–Ø –ö–ù–û–ü–ö–ê –ù–ê–°–¢–†–û–ï–ö
export const PremiumSettingsButton = () => {
  const [showSettings, setShowSettings] = React.useState(false)
  const { sounds } = useSounds()

  return (
    <>
      <FloatingActionButton
        icon="‚öôÔ∏è"
        position="bottom-right"
        tooltip="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        onClick={() => {
          sounds?.click()
          setShowSettings(true)
        }}
      />
      
      <PremiumSettingsModal
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
      />
    </>
  )
}

// üéõÔ∏è –ú–û–î–ê–õ –ù–ê–°–¢–†–û–ï–ö
export const PremiumSettingsModal = ({ isOpen, onClose }) => {
  const [currentBackground, setCurrentBackground] = React.useState(
    localStorage.getItem('gkbr_background') || 'particles'
  )

  const handleBackgroundChange = (bg) => {
    setCurrentBackground(bg)
    localStorage.setItem('gkbr_background', bg)
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–∞
    window.dispatchEvent(new CustomEvent('gkbr:background-changed', { detail: bg }))
  }

  return (
    <AnimatedModal
      isOpen={isOpen}
      onClose={onClose}
      title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
      size="medium"
    >
      <div className="space-y-8">
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã */}
        <div>
          <h4 className="text-lg font-semibold text-white mb-4">üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h4>
          <ThemeSelector />
        </div>
        
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ */}
        <div>
          <h4 className="text-lg font-semibold text-white mb-4">üåå –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω</h4>
          <BackgroundSelector 
            currentBackground={currentBackground}
            onBackgroundChange={handleBackgroundChange}
          />
        </div>
        
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ */}
        <div>
          <h4 className="text-lg font-semibold text-white mb-4">üîä –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</h4>
          <SoundSettings />
        </div>
        
        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <PremiumCard>
          <h4 className="text-lg font-semibold text-white mb-4">üéÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
          
          <div className="space-y-4">
            <AnimationToggle />
            
            <AnimatedToggle
              label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
              description="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"
              checked={localStorage.getItem('gkbr_notifications') !== 'false'}
              onChange={(checked) => {
                localStorage.setItem('gkbr_notifications', checked.toString())
              }}
            />
            
            <AnimatedToggle
              label="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
              description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"
              checked={localStorage.getItem('gkbr_autosave') !== 'false'}
              onChange={(checked) => {
                localStorage.setItem('gkbr_autosave', checked.toString())
              }}
            />
            
            <AnimatedToggle
              label="–†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞"
              description="–°–∫—Ä—ã–≤–∞—Ç—å –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
              checked={localStorage.getItem('gkbr_focus_mode') === 'true'}
              onChange={(checked) => {
                localStorage.setItem('gkbr_focus_mode', checked.toString())
              }}
            />

            <AnimatedToggle
              label="–≠—Ñ—Ñ–µ–∫—Ç –∫—É—Ä—Å–æ—Ä–∞"
              description="–ß–∞—Å—Ç–∏—Ü—ã —Å–ª–µ–¥—É—é—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º"
              checked={localStorage.getItem('gkbr_particle_cursor') === 'true'}
              onChange={(checked) => {
                localStorage.setItem('gkbr_particle_cursor', checked.toString())
                if (checked) {
                  window.dispatchEvent(new Event('gkbr:enable-cursor'))
                } else {
                  window.dispatchEvent(new Event('gkbr:disable-cursor'))
                }
              }}
            />
          </div>
        </PremiumCard>
      </div>
    </AnimatedModal>
  )
}

// üí≥ –ü–†–ï–ú–ò–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê –í–•–û–î–ê
export const PremiumLoginForm = ({ 
  onSubmit, 
  isLoading = false, 
  title = 'GKBR Platform',
  subtitle = '–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
  className = '' 
}) => {
  const { sounds } = useSounds()
  const [formData, setFormData] = React.useState({ email: '', password: '' })
  
  const handleSubmit = (e) => {
    e.preventDefault()
    if (sounds) sounds.click()
    if (onSubmit) onSubmit(formData)
  }

  return (
    <div className={`max-w-md mx-auto ${className}`}>
      <GlowEffect color="blue" intensity="medium" trigger="always">
        <PremiumCard variant="glass" className="text-center">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent mb-2">
              <TypewriterEffect text={title} speed={100} />
            </h1>
            <p className="text-blue-200">{subtitle}</p>
          </div>

          {/* –§–æ—Ä–º–∞ */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <PremiumInput
              label="Email"
              type="email"
              variant="accent"
              icon="üìß"
              value={formData.email}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              required
            />
            
            <PremiumInput
              label="–ü–∞—Ä–æ–ª—å"
              type="password"
              variant="accent"
              icon="üîí"
              value={formData.password}
              onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
              required
            />

            <RippleButton
              type="submit"
              variant="primary"
              size="large"
              disabled={isLoading}
              loading={isLoading}
              className="w-full"
            >
              {isLoading ? '–í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É...' : '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
            </RippleButton>
          </form>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ */}
          <div className="mt-6 text-center">
            <button className="text-blue-400 hover:text-blue-300 text-sm transition-colors">
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
            </button>
          </div>
        </PremiumCard>
      </GlowEffect>
    </div>
  )
}

// üìã –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ô –•–ï–î–ï–†
export const PremiumHeader = ({ 
  title, 
  subtitle, 
  user, 
  onSettingsClick, 
  onLogout,
  showUserInfo = true,
  className = '' 
}) => {
  const { sounds } = useSounds()

  return (
    <header className={`bg-black/20 backdrop-blur-lg border-b border-white/10 ${className}`}>
      <div className="max-w-7xl mx-auto px-6 py-4">
        <div className="flex items-center justify-between">
          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="flex items-center space-x-4">
            <div>
              <h1 className="text-2xl font-bold text-white">{title}</h1>
              {subtitle && <p className="text-blue-200 text-sm">{subtitle}</p>}
            </div>
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex items-center space-x-4">
            {showUserInfo && user && (
              <div className="flex items-center space-x-3">
                <AnimatedAvatar
                  name={user.fullName}
                  status="online"
                  showStatus={true}
                  onClick={() => sounds?.click()}
                />
                <div className="text-right">
                  <p className="text-white font-semibold">{user.fullName}</p>
                  <p className="text-blue-200 text-sm">{user.department}</p>
                </div>
              </div>
            )}
            
            {onSettingsClick && (
              <RippleButton
                variant="ghost"
                size="small"
                onClick={() => {
                  sounds?.click()
                  onSettingsClick()
                }}
              >
                ‚öôÔ∏è
              </RippleButton>
            )}
            
            {onLogout && (
              <RippleButton
                variant="danger"
                size="small"
                onClick={() => {
                  sounds?.click()
                  onLogout()
                }}
              >
                –í—ã—Ö–æ–¥
              </RippleButton>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}

// ü¶∂ –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ô –§–£–¢–ï–†
export const PremiumFooter = ({ className = '' }) => {
  return (
    <footer className={`bg-black/20 backdrop-blur-lg border-t border-white/10 py-6 ${className}`}>
      <div className="max-w-7xl mx-auto px-6 text-center">
        <p className="text-blue-200 text-sm">
          GKBR Platform ‚Äî –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è
        </p>
        <p className="text-blue-300 text-xs mt-1">
          ¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
        </p>
      </div>
    </footer>
  )
}

// üéâ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° –ó–í–£–ö–û–í–´–ú–ò –≠–§–§–ï–ö–¢–ê–ú–ò
export const PremiumNotification = ({ type, title, message, onClose }) => {
  const { sounds } = useSounds()

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  React.useEffect(() => {
    if (sounds) {
      switch (type) {
        case 'success':
          sounds.success()
          break
        case 'error':
          sounds.error()
          break
        case 'achievement':
          sounds.badge()
          break
        default:
          sounds.notification()
      }
    }
  }, [type, sounds])

  const typeStyles = {
    success: 'from-green-500/90 to-emerald-600/90 border-green-400/50',
    error: 'from-red-500/90 to-red-600/90 border-red-400/50',
    warning: 'from-yellow-500/90 to-orange-600/90 border-yellow-400/50',
    info: 'from-blue-500/90 to-blue-600/90 border-blue-400/50',
    achievement: 'from-purple-500/90 to-pink-600/90 border-purple-400/50'
  }

  const icons = {
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è',
    achievement: 'üèÜ'
  }

  return (
    <PremiumCard className={`bg-gradient-to-r ${typeStyles[type]} border animate-slide-in`}>
      <div className="flex items-start space-x-3">
        <div className="text-2xl">{icons[type]}</div>
        <div className="flex-1">
          <h4 className="font-bold text-white">{title}</h4>
          <p className="text-white/90 text-sm">{message}</p>
        </div>
        <RippleButton
          variant="ghost"
          size="small"
          onClick={() => {
            sounds?.click()
            onClose()
          }}
        >
          ‚úï
        </RippleButton>
      </div>
    </PremiumCard>
  )
}

// üéØ –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
export const NotificationSystem = () => {
  const [notifications, setNotifications] = React.useState([])

  React.useEffect(() => {
    const handleNotification = (event) => {
      const notification = {
        id: Date.now(),
        ...event.detail
      }
      
      setNotifications(prev => [...prev, notification])
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setNotifications(prev => prev.filter(n => n.id !== notification.id))
      }, 5000)
    }

    window.addEventListener('gkbr:notify', handleNotification)
    
    return () => {
      window.removeEventListener('gkbr:notify', handleNotification)
    }
  }, [])

  const removeNotification = (id) => {
    setNotifications(prev => prev.filter(n => n.id !== id))
  }

  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 max-w-sm">
      {notifications.map(notification => (
        <PremiumNotification
          key={notification.id}
          {...notification}
          onClose={() => removeNotification(notification.id)}
        />
      ))}
    </div>
  )
}

// üéØ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
export {
  ThemeProvider,
  SoundProvider,
  DesignSystemProvider,
  useTheme,
  useSounds,
  useDesignSystem
}

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export {
  PremiumCard,
  PremiumButton,
  PremiumInput,
  ThemeSelector,
  AnimationToggle
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
export {
  InteractiveCard,
  RippleButton,
  AnimatedModal,
  AnimatedToggle,
  AnimatedProgress,
  FloatingActionButton,
  AnimatedAvatar
}

// –§–æ–Ω—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
export {
  AnimatedBackground,
  ParticleBackground,
  WaveBackground,
  MatrixBackground,
  NeuralBackground,
  GeometricBackground,
  StarBackground,
  BackgroundSelector,
  GlowEffect,
  GlassEffect,
  GradientBackground,
  ShimmerEffect,
  WaveEffect,
  ParallaxEffect,
  ParticleCursor
}

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export {
  AnimatedCounter,
  TypewriterEffect,
  MagneticElement,
  PulseElement,
  ParticleSystem,
  WaveAnimation,
  SpinningLoader,
  AnimatedProgressLine
}

// –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export {
  GradientSpinner,
  AnimatedProgressBar,
  DotsLoader,
  WaveLoader,
  PulseLoader,
  SkeletonLoader,
  CardSkeleton,
  LoadingOverlay,
  StepLoader
}

// –ú–∏–∫—Ä–æ–∞–Ω–∏–º–∞—Ü–∏–∏
export {
  ScrollReveal,
  HoverEffect,
  StaggeredReveal,
  RippleEffect,
  AnimatedNumber,
  ContentLoader,
  MorphTransition,
  ShakeAnimation,
  AttentionPulse
}

// –ó–≤—É–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
export {
  SoundSettings,
  useSoundOnMount,
  useSoundOnChange,
  SoundTrigger
}


// üé® –ì–õ–ê–í–ù–´–ô –≠–ö–°–ü–û–†–¢
export default PremiumUIProvider