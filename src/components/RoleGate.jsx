// RoleGate.jsx - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—â–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ü—É—Ç—å: src/components/RoleGate.jsx

import React from 'react'
import { auditLogger } from '../utils/auditLogger'

// üé≠ –ö–û–ú–ü–û–ù–ï–ù–¢ –ó–ê–©–ò–¢–´ –ü–û –†–û–õ–Ø–ú
const RoleGate = ({ 
  children, 
  userRole, 
  requiredRole, 
  requiredRoles = [],
  allowedRoles = [],
  fallback = null,
  showAccessDenied = true 
}) => {

  // üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
  const getAllowedRoles = () => {
    let roles = []
    
    if (requiredRole) {
      roles.push(requiredRole)
    }
    
    if (requiredRoles.length > 0) {
      roles = [...roles, ...requiredRoles]
    }
    
    if (allowedRoles.length > 0) {
      roles = [...roles, ...allowedRoles]
    }

    return [...new Set(roles)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏
  const hasAccess = () => {
    if (!userRole) {
      return false
    }

    const allowedRoles = getAllowedRoles()
    
    if (allowedRoles.length === 0) {
      // –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—Å–µ–º
      return true
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π
    return checkRoleHierarchy(userRole, allowedRoles)
  }

  // üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π
  const checkRoleHierarchy = (userRole, allowedRoles) => {
    // –ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–æ–ª–µ–π (–æ—Ç –Ω–∏–∑—à–µ–π –∫ –≤—ã—Å—à–µ–π)
    const roleHierarchy = {
      'student': 1,
      'user': 2,
      'instructor': 3,
      'moderator': 4,
      'admin': 5,
      'superadmin_s': 6
    }

    const userLevel = roleHierarchy[userRole] || 0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (allowedRoles.includes(userRole)) {
      return true
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å—à–∏–º–∏ —Ä–æ–ª—è–º–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∏–∑—à–∏—Ö —Ä–æ–ª–µ–π
    const minRequiredLevel = Math.min(
      ...allowedRoles.map(role => roleHierarchy[role] || 999)
    )

    return userLevel >= minRequiredLevel
  }

  // üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  const logAccessAttempt = (granted) => {
    auditLogger.log('role_access_attempt', {
      userRole,
      requiredRoles: getAllowedRoles(),
      accessGranted: granted,
      component: 'RoleGate'
    })
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
  const accessGranted = hasAccess()
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
  logAccessAttempt(accessGranted)

  // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
  if (accessGranted) {
    return <>{children}</>
  }

  // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∏ –µ—Å—Ç—å custom fallback
  if (fallback) {
    return fallback
  }

  // –ï—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
  if (!showAccessDenied) {
    return null
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
  return (
    <AccessDeniedScreen 
      userRole={userRole}
      requiredRoles={getAllowedRoles()}
    />
  )
}

// üö´ –≠–ö–†–ê–ù "–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù"
const AccessDeniedScreen = ({ userRole, requiredRoles }) => {
  const getRoleDisplayName = (role) => {
    const roleNames = {
      'student': '–°—Ç—É–¥–µ–Ω—Ç',
      'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      'instructor': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'superadmin_s': '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    return roleNames[role] || role
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center">
      <div className="max-w-md mx-auto text-center p-8">
        {/* –ò–∫–æ–Ω–∫–∞ */}
        <div className="text-8xl mb-6">üîí</div>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h1 className="text-3xl font-bold text-red-800 mb-4">
          –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
        </h1>
        
        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <p className="text-red-600 mb-6">
          –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.
        </p>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö */}
        <div className="bg-white rounded-lg p-6 mb-6 text-left">
          <div className="mb-4">
            <span className="text-sm font-semibold text-gray-600">–í–∞—à–∞ —Ä–æ–ª—å:</span>
            <div className="text-lg font-bold text-blue-600">
              {getRoleDisplayName(userRole)}
            </div>
          </div>
          
          <div>
            <span className="text-sm font-semibold text-gray-600">–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:</span>
            <div className="mt-2 space-y-1">
              {requiredRoles.map(role => (
                <div key={role} className="text-sm bg-gray-100 rounded px-2 py-1 inline-block mr-2">
                  {getRoleDisplayName(role)}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="space-y-3">
          <button 
            onClick={() => window.history.back()}
            className="w-full bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-all font-semibold"
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
          </button>
          
          <button 
            onClick={() => window.location.href = '/dashboard'}
            className="w-full bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-all"
          >
            üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <p className="text-xs text-gray-500 mt-6">
          –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        </p>
      </div>
    </div>
  )
}

// üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –•–£–ö–ò –ò –ö–û–ú–ü–û–ù–ï–ù–¢–´

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
export const useRoleCheck = (userRole) => {
  const hasRole = (requiredRole) => {
    return new RoleGate({ userRole, requiredRole }).hasAccess()
  }

  const hasAnyRole = (roles) => {
    return roles.some(role => hasRole(role))
  }

  const hasAllRoles = (roles) => {
    return roles.every(role => hasRole(role))
  }

  const isAdmin = () => {
    return hasAnyRole(['admin', 'superadmin_s'])
  }

  const isSuperAdmin = () => {
    return hasRole('superadmin_s')
  }

  return {
    hasRole,
    hasAnyRole,
    hasAllRoles,
    isAdmin,
    isSuperAdmin,
    userRole
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
export const RoleBasedRender = ({ 
  userRole, 
  allowedRoles, 
  children, 
  fallback = null 
}) => {
  const hasAccess = allowedRoles.includes(userRole)
  return hasAccess ? children : fallback
}

// HOC –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ–ª—è–º
export const withRoleProtection = (WrappedComponent, requiredRoles) => {
  return function ProtectedComponent(props) {
    return (
      <RoleGate 
        userRole={props.userRole} 
        requiredRoles={requiredRoles}
      >
        <WrappedComponent {...props} />
      </RoleGate>
    )
  }
}

export default RoleGate